package com.kblaney.nhl.draft.ui;

import java.io.IOException;
import com.kblaney.assertions.ArgAssert;
import com.kblaney.nhl.Player;
import com.kblaney.nhl.PlayersByTeamAndPosition;
import com.kblaney.nhl.Position;
import com.kblaney.nhl.Team;
import com.kblaney.nhl.draft.Draft;
import com.kblaney.nhl.draft.DraftFactory;
import com.kblaney.nhl.draft.DraftOrderGetter;
import com.kblaney.nhl.draft.DraftPick;
import com.kblaney.nhl.draft.DraftReaderWriter;
import com.kblaney.nhl.draft.IntOrStringValidator;
import com.kblaney.nhl.draft.NumPooleesValidator;
import com.kblaney.nhl.draft.NumRoundsValidator;
import com.kblaney.nhl.draft.Poolee;
import com.kblaney.nhl.draft.SeasonType;
import java.awt.CardLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.Reader;
import java.io.Writer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import org.apache.commons.io.IOUtils;

/**
 * The main frame of the application.
 */
@SuppressWarnings("serial")
final class MainFrame extends JFrame
{
  private final PlayersByTeamAndPosition playersByTeamAndPosition;
  private final DraftOrderGetter draftOrderGetter;
  private final DraftFactory draftFactory;
  private final DraftReaderWriter draftReaderWriter;
  private final TableModelFactory tableModelFactory;
  private final IntOrStringValidator numRoundsValidator =
        new NumRoundsValidator();
  private final IntOrStringValidator numPooleesValidator =
        new NumPooleesValidator();
  private final List<JLabel> tickerLabels;
  private final int numPicksInTicker;
  private final Map<JLabel, DraftPick> tickerLabelToDraftPickMap =
        new HashMap<JLabel, DraftPick>();
  private Draft draft;
  private JFileChooser fileChooser;
  private File draftOutputFile;

  /**
   * Consructs a new instance of MainFrame for a draft that has specified
   * players, a specified object that gets the draft order, a specified
   * draft factory, and a specified object that reads and writes the draft.
   *
   * @param playersByTeamAndPosition the players, which can't be null
   * @param draftOrderGetter the object that gets the draft order, which
   * can't be null
   * @param draftFactor the object that creates drafts, which can't be null
   * @param draftReaderWriter the object that reads and writes drafts, which
   * can't be null
   */
  public MainFrame(final PlayersByTeamAndPosition playersByTeamAndPosition,
        final TableModelFactory tableModelFactory,
        final DraftOrderGetter draftOrderGetter,
        final DraftFactory draftFactory,
        final DraftReaderWriter draftReaderWriter)
  {
    ArgAssert.assertNotNull(playersByTeamAndPosition, "playersByTeamAndPosition");
    ArgAssert.assertNotNull(tableModelFactory, "tableModelFactory");
    ArgAssert.assertNotNull(draftOrderGetter, "draftOrderGetter");
    ArgAssert.assertNotNull(draftFactory, "draftFactory");
    ArgAssert.assertNotNull(draftReaderWriter, "draftReaderWriter");

    this.playersByTeamAndPosition = playersByTeamAndPosition;
    this.tableModelFactory = tableModelFactory;
    this.draftOrderGetter = draftOrderGetter;
    this.draftFactory = draftFactory;
    this.draftReaderWriter = draftReaderWriter;

    initComponents();

    // We must initialize the list of ticker labels after initComponents
    // is called so that the labels aren't null.
    //
    tickerLabels = new ArrayList<JLabel>();
    tickerLabels.add(mostRecentPickLabel);
    tickerLabels.add(secondMostRecentPickLabel);
    tickerLabels.add(thirdMostRecentPickLabel);
    tickerLabels.add(fourthMostRecentPickLabel);
    tickerLabels.add(fifthMostRecentPickLabel);
    numPicksInTicker = tickerLabels.size();

    // Center on the screen.
    //
    setLocationRelativeTo(null);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    preDraftPanel = new javax.swing.JPanel();
    titleLabel = new javax.swing.JLabel();
    easternConferencePanel = new javax.swing.JPanel();
    easternConferenceLabel = new javax.swing.JLabel();
    atlanticDivisionPanel = new javax.swing.JPanel();
    atlanticDivisionTeamPanel = new javax.swing.JPanel();
    newJerseyLabel = new javax.swing.JLabel();
    newYorkIslandersLabel = new javax.swing.JLabel();
    newYorkRangersLabel = new javax.swing.JLabel();
    philadelphiaLabel = new javax.swing.JLabel();
    pittsburghLabel = new javax.swing.JLabel();
    atlanticDivisionLabel = new javax.swing.JLabel();
    southeastDivisionPanel = new javax.swing.JPanel();
    southeastDivisionTeamsPanel = new javax.swing.JPanel();
    carolinaLabel = new javax.swing.JLabel();
    floridaLabel = new javax.swing.JLabel();
    tampaBayLabel = new javax.swing.JLabel();
    washingtonLabel = new javax.swing.JLabel();
    winnipegLabel = new javax.swing.JLabel();
    southeastDivisionLabel = new javax.swing.JLabel();
    northeastDivisionPanel = new javax.swing.JPanel();
    northeastDivisionTeamsPanel = new javax.swing.JPanel();
    bostonLabel = new javax.swing.JLabel();
    buffaloLabel = new javax.swing.JLabel();
    montrealLabel = new javax.swing.JLabel();
    ottawaLabel = new javax.swing.JLabel();
    torontoLabel = new javax.swing.JLabel();
    northeastDivisionLabel = new javax.swing.JLabel();
    westernConferencePanel = new javax.swing.JPanel();
    westernConferenceLabel = new javax.swing.JLabel();
    pacificDivisionPanel = new javax.swing.JPanel();
    pacificDivisionLabel = new javax.swing.JLabel();
    pacificDivisionTeamsPanel = new javax.swing.JPanel();
    anaheimLabel = new javax.swing.JLabel();
    dallasLabel = new javax.swing.JLabel();
    losAngelesLabel = new javax.swing.JLabel();
    phoenixLabel = new javax.swing.JLabel();
    sanJoseLabel = new javax.swing.JLabel();
    northwestDivisionPanel = new javax.swing.JPanel();
    northwestDivisionTeamsPanel = new javax.swing.JPanel();
    calgaryLabel = new javax.swing.JLabel();
    coloradoLabel = new javax.swing.JLabel();
    edmontonLabel = new javax.swing.JLabel();
    minnesotaLabel = new javax.swing.JLabel();
    vancouverLabel = new javax.swing.JLabel();
    northwestDivisionLabel = new javax.swing.JLabel();
    centralDivisionPanel = new javax.swing.JPanel();
    centralDivisionTeamsPanel = new javax.swing.JPanel();
    chicagoLabel = new javax.swing.JLabel();
    columbusLabel = new javax.swing.JLabel();
    detroitLabel = new javax.swing.JLabel();
    nashvilleLabel = new javax.swing.JLabel();
    stLouisLabel = new javax.swing.JLabel();
    centralDivisionLabel = new javax.swing.JLabel();
    draftPanel = new javax.swing.JPanel();
    mainChartScrollPane = new javax.swing.JScrollPane();
    chartTable = new javax.swing.JTable();
    tickerAndBottomPanel = new javax.swing.JPanel();
    bottomPanel = new javax.swing.JPanel();
    infoPanel = new javax.swing.JPanel();
    roundInfoPanel = new javax.swing.JPanel();
    roundLabel = new javax.swing.JLabel();
    roundNumLabel = new javax.swing.JLabel();
    roundOfLabel = new javax.swing.JLabel();
    totalNumRoundsLabel = new javax.swing.JLabel();
    draftPickInfoPanel = new javax.swing.JPanel();
    draftPickLabel = new javax.swing.JLabel();
    draftPickNumLabel = new javax.swing.JLabel();
    draftPickOfLabel = new javax.swing.JLabel();
    totalNumDraftPicksLabel = new javax.swing.JLabel();
    selectionPanel = new javax.swing.JPanel();
    nowDraftingLabel = new javax.swing.JLabel();
    teamPositionPlayerPanel = new javax.swing.JPanel();
    teamLabel = new javax.swing.JLabel();
    positionLabel = new javax.swing.JLabel();
    playerLabel = new javax.swing.JLabel();
    teamComboBox = new javax.swing.JComboBox();
    positionComboBox = new javax.swing.JComboBox();
    playerComboBox = new javax.swing.JComboBox();
    buttonPanel = new javax.swing.JPanel();
    makeDraftPickButton = new javax.swing.JButton();
    tickerPanel = new javax.swing.JPanel();
    fifthMostRecentPickLabel = new javax.swing.JLabel();
    fourthMostRecentPickLabel = new javax.swing.JLabel();
    thirdMostRecentPickLabel = new javax.swing.JLabel();
    secondMostRecentPickLabel = new javax.swing.JLabel();
    mostRecentPickLabel = new javax.swing.JLabel();
    menuBar = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    newPlayoffDraftMenuItem = new javax.swing.JMenuItem();
    newRegularSeasonDraftMenuItem = new javax.swing.JMenuItem();
    openDraftMenuItem = new javax.swing.JMenuItem();
    saveDraftMenuItem = new javax.swing.JMenuItem();
    exitMenuItem = new javax.swing.JMenuItem();
    draftMenu = new javax.swing.JMenu();
    addPooleeMenuItem = new javax.swing.JMenuItem();
    showPooleesMenuItem = new javax.swing.JMenuItem();
    startDraftMenuItem = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    setTitle("Hockey Pool!");
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        formWindowClosing(evt);
      }
    });
    getContentPane().setLayout(new java.awt.CardLayout(5, 2));

    preDraftPanel.setLayout(new java.awt.GridBagLayout());

    titleLabel.setFont(new java.awt.Font("Tahoma", 1, 48));
    titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    titleLabel.setText("Hockey Pool!");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 2;
    preDraftPanel.add(titleLabel, gridBagConstraints);

    easternConferencePanel.setLayout(new java.awt.GridLayout(4, 0, 0, 20));

    easternConferenceLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
    easternConferenceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    easternConferenceLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nhl-logos/easternConference.gif"))); // NOI18N
    easternConferencePanel.add(easternConferenceLabel);

    atlanticDivisionPanel.setLayout(new java.awt.BorderLayout());

    newJerseyLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/newJersey.png"))); // NOI18N
    atlanticDivisionTeamPanel.add(newJerseyLabel);

    newYorkIslandersLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/newYorkIslanders.png"))); // NOI18N
    atlanticDivisionTeamPanel.add(newYorkIslandersLabel);

    newYorkRangersLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/newYorkRangers.png"))); // NOI18N
    atlanticDivisionTeamPanel.add(newYorkRangersLabel);

    philadelphiaLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/philadelphia.png"))); // NOI18N
    atlanticDivisionTeamPanel.add(philadelphiaLabel);

    pittsburghLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/pittsburgh.png"))); // NOI18N
    atlanticDivisionTeamPanel.add(pittsburghLabel);

    atlanticDivisionPanel.add(atlanticDivisionTeamPanel, java.awt.BorderLayout.CENTER);

    atlanticDivisionLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
    atlanticDivisionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    atlanticDivisionLabel.setText("Atlantic");
    atlanticDivisionPanel.add(atlanticDivisionLabel, java.awt.BorderLayout.NORTH);

    easternConferencePanel.add(atlanticDivisionPanel);

    southeastDivisionPanel.setLayout(new java.awt.BorderLayout());

    carolinaLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/carolina.png"))); // NOI18N
    southeastDivisionTeamsPanel.add(carolinaLabel);

    floridaLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/florida.png"))); // NOI18N
    southeastDivisionTeamsPanel.add(floridaLabel);

    tampaBayLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/tampaBay.png"))); // NOI18N
    southeastDivisionTeamsPanel.add(tampaBayLabel);

    washingtonLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/washington.png"))); // NOI18N
    southeastDivisionTeamsPanel.add(washingtonLabel);

    winnipegLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/winnipeg.png"))); // NOI18N
    southeastDivisionTeamsPanel.add(winnipegLabel);

    southeastDivisionPanel.add(southeastDivisionTeamsPanel, java.awt.BorderLayout.CENTER);

    southeastDivisionLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
    southeastDivisionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    southeastDivisionLabel.setText("Southeast");
    southeastDivisionPanel.add(southeastDivisionLabel, java.awt.BorderLayout.NORTH);

    easternConferencePanel.add(southeastDivisionPanel);

    northeastDivisionPanel.setLayout(new java.awt.BorderLayout());

    bostonLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/boston.png"))); // NOI18N
    northeastDivisionTeamsPanel.add(bostonLabel);

    buffaloLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/buffalo.png"))); // NOI18N
    northeastDivisionTeamsPanel.add(buffaloLabel);

    montrealLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/montreal.png"))); // NOI18N
    northeastDivisionTeamsPanel.add(montrealLabel);

    ottawaLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/ottawa.png"))); // NOI18N
    northeastDivisionTeamsPanel.add(ottawaLabel);

    torontoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/toronto.png"))); // NOI18N
    northeastDivisionTeamsPanel.add(torontoLabel);

    northeastDivisionPanel.add(northeastDivisionTeamsPanel, java.awt.BorderLayout.CENTER);

    northeastDivisionLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
    northeastDivisionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    northeastDivisionLabel.setText("Northeast");
    northeastDivisionPanel.add(northeastDivisionLabel, java.awt.BorderLayout.NORTH);

    easternConferencePanel.add(northeastDivisionPanel);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.ipady = 20;
    gridBagConstraints.insets = new java.awt.Insets(0, 35, 0, 0);
    preDraftPanel.add(easternConferencePanel, gridBagConstraints);

    westernConferencePanel.setLayout(new java.awt.GridLayout(4, 0, 0, 20));

    westernConferenceLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
    westernConferenceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    westernConferenceLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/nhl-logos/westernConference.gif"))); // NOI18N
    westernConferencePanel.add(westernConferenceLabel);

    pacificDivisionPanel.setLayout(new java.awt.BorderLayout());

    pacificDivisionLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
    pacificDivisionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    pacificDivisionLabel.setText("Pacific");
    pacificDivisionPanel.add(pacificDivisionLabel, java.awt.BorderLayout.NORTH);

    anaheimLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/anaheim.png"))); // NOI18N
    pacificDivisionTeamsPanel.add(anaheimLabel);

    dallasLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/dallas.png"))); // NOI18N
    pacificDivisionTeamsPanel.add(dallasLabel);

    losAngelesLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/losAngeles.png"))); // NOI18N
    pacificDivisionTeamsPanel.add(losAngelesLabel);

    phoenixLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/phoenix.png"))); // NOI18N
    pacificDivisionTeamsPanel.add(phoenixLabel);

    sanJoseLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/sanJose.png"))); // NOI18N
    pacificDivisionTeamsPanel.add(sanJoseLabel);

    pacificDivisionPanel.add(pacificDivisionTeamsPanel, java.awt.BorderLayout.CENTER);

    westernConferencePanel.add(pacificDivisionPanel);

    northwestDivisionPanel.setLayout(new java.awt.BorderLayout());

    calgaryLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/calgary.png"))); // NOI18N
    northwestDivisionTeamsPanel.add(calgaryLabel);

    coloradoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/colorado.png"))); // NOI18N
    northwestDivisionTeamsPanel.add(coloradoLabel);

    edmontonLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/edmonton.png"))); // NOI18N
    northwestDivisionTeamsPanel.add(edmontonLabel);

    minnesotaLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/minnesota.png"))); // NOI18N
    northwestDivisionTeamsPanel.add(minnesotaLabel);

    vancouverLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/vancouver.png"))); // NOI18N
    northwestDivisionTeamsPanel.add(vancouverLabel);

    northwestDivisionPanel.add(northwestDivisionTeamsPanel, java.awt.BorderLayout.CENTER);

    northwestDivisionLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
    northwestDivisionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    northwestDivisionLabel.setText("Northwest");
    northwestDivisionPanel.add(northwestDivisionLabel, java.awt.BorderLayout.NORTH);

    westernConferencePanel.add(northwestDivisionPanel);

    centralDivisionPanel.setLayout(new java.awt.BorderLayout());

    chicagoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/chicago.png"))); // NOI18N
    centralDivisionTeamsPanel.add(chicagoLabel);

    columbusLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/columbus.png"))); // NOI18N
    centralDivisionTeamsPanel.add(columbusLabel);

    detroitLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/detroit.png"))); // NOI18N
    centralDivisionTeamsPanel.add(detroitLabel);

    nashvilleLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/nashville.png"))); // NOI18N
    centralDivisionTeamsPanel.add(nashvilleLabel);

    stLouisLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/team-logos/stLouis.png"))); // NOI18N
    centralDivisionTeamsPanel.add(stLouisLabel);

    centralDivisionPanel.add(centralDivisionTeamsPanel, java.awt.BorderLayout.CENTER);

    centralDivisionLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
    centralDivisionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    centralDivisionLabel.setText("Central");
    centralDivisionPanel.add(centralDivisionLabel, java.awt.BorderLayout.NORTH);

    westernConferencePanel.add(centralDivisionPanel);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.ipady = 20;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 35);
    preDraftPanel.add(westernConferencePanel, gridBagConstraints);

    getContentPane().add(preDraftPanel, "preDraftPanel");

    draftPanel.setLayout(new java.awt.GridBagLayout());

    chartTable.setGridColor(new java.awt.Color(153, 153, 153));
    chartTable.setTableHeader(null);
    mainChartScrollPane.setViewportView(chartTable);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    draftPanel.add(mainChartScrollPane, gridBagConstraints);

    tickerAndBottomPanel.setLayout(new java.awt.BorderLayout(0, 3));

    bottomPanel.setLayout(new java.awt.BorderLayout());

    infoPanel.setLayout(new java.awt.GridBagLayout());

    roundLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
    roundLabel.setText("Round:  ");
    roundInfoPanel.add(roundLabel);

    roundNumLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
    roundNumLabel.setText("21");
    roundInfoPanel.add(roundNumLabel);

    roundOfLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
    roundOfLabel.setText("of");
    roundInfoPanel.add(roundOfLabel);

    totalNumRoundsLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
    totalNumRoundsLabel.setText("23");
    roundInfoPanel.add(totalNumRoundsLabel);

    infoPanel.add(roundInfoPanel, new java.awt.GridBagConstraints());

    draftPickLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
    draftPickLabel.setText("Pick:  ");
    draftPickInfoPanel.add(draftPickLabel);

    draftPickNumLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
    draftPickNumLabel.setText("1");
    draftPickInfoPanel.add(draftPickNumLabel);

    draftPickOfLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
    draftPickOfLabel.setText("of");
    draftPickInfoPanel.add(draftPickOfLabel);

    totalNumDraftPicksLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
    totalNumDraftPicksLabel.setText("230");
    draftPickInfoPanel.add(totalNumDraftPicksLabel);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    infoPanel.add(draftPickInfoPanel, gridBagConstraints);

    bottomPanel.add(infoPanel, java.awt.BorderLayout.WEST);

    selectionPanel.setLayout(new java.awt.BorderLayout());

    nowDraftingLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
    nowDraftingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    nowDraftingLabel.setText("Now drafting:  ");
    selectionPanel.add(nowDraftingLabel, java.awt.BorderLayout.NORTH);

    teamPositionPlayerPanel.setLayout(new java.awt.GridBagLayout());

    teamLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
    teamLabel.setText("Team:  ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
    teamPositionPlayerPanel.add(teamLabel, gridBagConstraints);

    positionLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
    positionLabel.setText("Position:  ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
    teamPositionPlayerPanel.add(positionLabel, gridBagConstraints);

    playerLabel.setFont(new java.awt.Font("Tahoma", 1, 14));
    playerLabel.setText("Player:  ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
    teamPositionPlayerPanel.add(playerLabel, gridBagConstraints);

    teamComboBox.setMaximumRowCount(30);
    teamComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        teamComboBoxActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
    teamPositionPlayerPanel.add(teamComboBox, gridBagConstraints);

    positionComboBox.setMaximumRowCount(3);
    positionComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        positionComboBoxActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
    teamPositionPlayerPanel.add(positionComboBox, gridBagConstraints);

    playerComboBox.setMaximumRowCount(20);
    playerComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        playerComboBoxActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
    teamPositionPlayerPanel.add(playerComboBox, gridBagConstraints);

    selectionPanel.add(teamPositionPlayerPanel, java.awt.BorderLayout.CENTER);

    bottomPanel.add(selectionPanel, java.awt.BorderLayout.CENTER);

    buttonPanel.setLayout(new java.awt.BorderLayout());

    makeDraftPickButton.setText("Make draft pick");
    makeDraftPickButton.setEnabled(false);
    makeDraftPickButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        makeDraftPickActionPerformed(evt);
      }
    });
    buttonPanel.add(makeDraftPickButton, java.awt.BorderLayout.CENTER);

    bottomPanel.add(buttonPanel, java.awt.BorderLayout.EAST);

    tickerAndBottomPanel.add(bottomPanel, java.awt.BorderLayout.CENTER);

    tickerPanel.setLayout(new java.awt.GridLayout(1, 0, 5, 0));

    fifthMostRecentPickLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    tickerPanel.add(fifthMostRecentPickLabel);

    fourthMostRecentPickLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    tickerPanel.add(fourthMostRecentPickLabel);

    thirdMostRecentPickLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    tickerPanel.add(thirdMostRecentPickLabel);

    secondMostRecentPickLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    tickerPanel.add(secondMostRecentPickLabel);

    mostRecentPickLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    tickerPanel.add(mostRecentPickLabel);

    tickerAndBottomPanel.add(tickerPanel, java.awt.BorderLayout.NORTH);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    draftPanel.add(tickerAndBottomPanel, gridBagConstraints);

    getContentPane().add(draftPanel, "draftPanel");

    fileMenu.setText("File");

    newPlayoffDraftMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
    newPlayoffDraftMenuItem.setText("New playoff draft...");
    newPlayoffDraftMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        newPlayoffDraftActionPerformed(evt);
      }
    });
    fileMenu.add(newPlayoffDraftMenuItem);

    newRegularSeasonDraftMenuItem.setText("New regular season draft...");
    newRegularSeasonDraftMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        newRegularSeasonDraftActionPerformed(evt);
      }
    });
    fileMenu.add(newRegularSeasonDraftMenuItem);

    openDraftMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
    openDraftMenuItem.setText("Open draft...");
    openDraftMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        openDraftActionPerformed(evt);
      }
    });
    fileMenu.add(openDraftMenuItem);

    saveDraftMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    saveDraftMenuItem.setText("Save draft...");
    saveDraftMenuItem.setEnabled(false);
    saveDraftMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveDraftActionPerformed(evt);
      }
    });
    fileMenu.add(saveDraftMenuItem);

    exitMenuItem.setText("Exit");
    exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        exitActionPerformed(evt);
      }
    });
    fileMenu.add(exitMenuItem);

    menuBar.add(fileMenu);

    draftMenu.setText("Draft");

    addPooleeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
    addPooleeMenuItem.setText("Add poolee...");
    addPooleeMenuItem.setEnabled(false);
    addPooleeMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        addPooleeActionPerformed(evt);
      }
    });
    draftMenu.add(addPooleeMenuItem);

    showPooleesMenuItem.setText("Show poolees...");
    showPooleesMenuItem.setEnabled(false);
    showPooleesMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        showPooleesActionPerformed(evt);
      }
    });
    draftMenu.add(showPooleesMenuItem);

    startDraftMenuItem.setText("Start draft...");
    startDraftMenuItem.setEnabled(false);
    startDraftMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        startDraftActionPerformed(evt);
      }
    });
    draftMenu.add(startDraftMenuItem);

    menuBar.add(draftMenu);
    
    undoLastDraftPickMenuItem = new JMenuItem("Undo last draft pick");
    undoLastDraftPickMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z, InputEvent.CTRL_MASK));
    undoLastDraftPickMenuItem.setEnabled(false);
    undoLastDraftPickMenuItem.addActionListener(new ActionListener() {
      public void actionPerformed(final ActionEvent unused) {
        undoLastDraftPickActionPerformed();
      }
    });
    draftMenu.add(undoLastDraftPickMenuItem);

    setJMenuBar(menuBar);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void undoLastDraftPickActionPerformed()
  {
    draft.undoLastDraftPick();
    updateUiForUnderwayDraft();
    fireChartTableDataChanged();
  }

  private void newRegularSeasonDraftActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newRegularSeasonDraftActionPerformed
   {//GEN-HEADEREND:event_newRegularSeasonDraftActionPerformed
     handleNewDraft(SeasonType.REGULAR_SEASON);
   }//GEN-LAST:event_newRegularSeasonDraftActionPerformed

   private void showPooleesActionPerformed(java.awt.event.ActionEvent event)//GEN-FIRST:event_showPooleesActionPerformed
   {//GEN-HEADEREND:event_showPooleesActionPerformed
     try
     {
       ShowPooleesDialog showPooleesDialog = new ShowPooleesDialog(
             this, draft.getFirstRoundDraftOrder());
       showPooleesDialog.setVisible(true);
     }
     catch (final Exception e)
     {
       UiUtil.showErrorMessageDialog(this, e.getMessage());
     }
   }//GEN-LAST:event_showPooleesActionPerformed

   private void formWindowClosing(java.awt.event.WindowEvent event)//GEN-FIRST:event_formWindowClosing
   {//GEN-HEADEREND:event_formWindowClosing
     exit();
   }//GEN-LAST:event_formWindowClosing

   private void exitActionPerformed(java.awt.event.ActionEvent event)//GEN-FIRST:event_exitActionPerformed
   {//GEN-HEADEREND:event_exitActionPerformed
     exit();
   }//GEN-LAST:event_exitActionPerformed

  /**
   * Asks the user whether to exit the application.
   */
  private void exit()
  {
    if (UiUtil.showYesNoQuestionDefaultNo(this, "Do you want to exit?",
          "Exit") == JOptionPane.YES_OPTION)
    {
      setVisible(false);
      dispose();
    }
  }

   private void openDraftActionPerformed(java.awt.event.ActionEvent event)//GEN-FIRST:event_openDraftActionPerformed
   {//GEN-HEADEREND:event_openDraftActionPerformed
     try
     {
       if (fileChooser == null)
       {
         fileChooser = new JFileChooser();
       }

       if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
       {
         Reader reader = null;
         try
         {
           reader = new BufferedReader(new FileReader(
                 fileChooser.getSelectedFile()));

           draft = draftReaderWriter.readDraft(reader);

           // TODO:  Don't assume the draft is underway.  (It might not even
           // have all its poolees defined.)

           updateUiForUnderwayDraft();
           fireChartTableDataChanged();
         }
         finally
         {
           IOUtils.closeQuietly(reader);
         }
       }
     }
     catch (final Exception e)
     {
       UiUtil.showErrorMessageDialog(this, e.getMessage());
     }
   }//GEN-LAST:event_openDraftActionPerformed

   private void saveDraftActionPerformed(java.awt.event.ActionEvent event)//GEN-FIRST:event_saveDraftActionPerformed
   {//GEN-HEADEREND:event_saveDraftActionPerformed
    try
    {
      if (fileChooser == null)
      {
        fileChooser = new JFileChooser();
      }

      if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
      {
        draftOutputFile = fileChooser.getSelectedFile();
        saveDraftIfOutputFileSelected();
        JOptionPane.showMessageDialog(this, "Draft successfully saved");
      }
    }
    catch (final Exception e)
    {
      UiUtil.showErrorMessageDialog(this, e.getMessage());
    }
   }//GEN-LAST:event_saveDraftActionPerformed

  private void saveDraftIfOutputFileSelected() throws IOException
  {
    if (draftOutputFile != null)
    {
      final Writer writer = new BufferedWriter(new FileWriter(draftOutputFile));
      try
      {
        draftReaderWriter.writeDraft(draft, writer);
      }
      finally
      {
        writer.close();
      }
    }
  }

   private void makeDraftPickActionPerformed(java.awt.event.ActionEvent event)//GEN-FIRST:event_makeDraftPickActionPerformed
   {//GEN-HEADEREND:event_makeDraftPickActionPerformed
     try
     {
       final Player player = getSelectedPlayer();
       final Poolee poolee = draft.getNextPooleeToDraft();

       final StringBuilder confirmationMessage = new StringBuilder();
       confirmationMessage.append("Do you confirm your selection of ");
       confirmationMessage.append(
             player.getPosition().toString().toLowerCase());
       confirmationMessage.append(" ");
       confirmationMessage.append(player.getFullName());
       confirmationMessage.append(" of the ");
       confirmationMessage.append(player.getTeam().toString());
       confirmationMessage.append("?");

       final String[] message = new String[]
       {
         poolee.getFullName() + ":",
         confirmationMessage.toString()
       };
       final String title = "Confirm draft pick";

       if (UiUtil.showYesNoQuestionDefaultNo(this, message, title) ==
             JOptionPane.YES_OPTION)
       {
         makeDraftPickButton.setEnabled(false);
         final DraftPick draftPick = draft.addDraftPick(player, poolee);

         final DraftPickDialog draftPickDialog = new DraftPickDialog(this,
               draftPick);
         draftPickDialog.setVisible(true);

         updateUiAfterDraftPick();
         fireChartTableDataChanged();
         saveDraftIfOutputFileSelected();
       }
     }
     catch (final Exception e)
     {
       UiUtil.showErrorMessageDialog(this, e.getMessage());
     }
   }//GEN-LAST:event_makeDraftPickActionPerformed

  /**
   * Updates the user interface after a draft pick is made.
   */
  private void updateUiAfterDraftPick()
  {
    if (draft.isDraftOver())
    {
      setTeamEmptyModel();
      setPositionEmptyModel();
      setPlayerEmptyModel();
      teamComboBox.setEnabled(false);
      positionComboBox.setEnabled(false);
      playerComboBox.setEnabled(false);
      nowDraftingLabel.setText("Draft completed");
    }
    else
    {
      setRoundNum();
      setDraftPickNum();
      setNowDrafting();
      setTeamModel();
      setPositionModel();
      setPlayerEmptyModel();
    }

    setEnabledStatusForUndoLastDraftPickMenuItem();
    updateTicker();
  }

  private void updateTicker()
  {
    tickerLabelToDraftPickMap.clear();

    final List<DraftPick> mostRecentDraftPicks =
          draft.getMostRecentNDraftPicks(numPicksInTicker);
    for (int i = 0; i < mostRecentDraftPicks.size(); i++)
    {
      final JLabel tickerLabel = tickerLabels.get(i);
      final DraftPick draftPick = mostRecentDraftPicks.get(i);
      tickerLabelToDraftPickMap.put(tickerLabel, draftPick);

      final StringBuilder labelText = new StringBuilder();
      labelText.append(draftPick.getPoolee().getFirstName());
      labelText.append(": ");
      labelText.append(draftPick.getPickNum());
      labelText.append(" - ");
      labelText.append(draftPick.getPlayer().getShortenedFullName());
      labelText.append(" (");
      labelText.append(draftPick.getPlayer().getTeam().getShortform());
      labelText.append(")");

      tickerLabel.setForeground(new TickerDraftPickColorSupplier().getColor(draftPick, draft));
      tickerLabel.setText(labelText.toString());
      tickerLabel.getWidth();
    }
  }

  /**
   * Sets the round number.
   */
  private void setRoundNum()
  {
    roundNumLabel.setText(Integer.toString(draft.getRoundNumOfNextDraftPick()));
    totalNumRoundsLabel.setText(Integer.toString(draft.getNumRounds()));
  }

  private void setDraftPickNum()
  {
    draftPickNumLabel.setText(Integer.toString(draft.getNextDraftPickNum()));
    totalNumDraftPicksLabel.setText(Integer.toString(
          draft.getNumRounds() * draft.getNumPoolees()));
  }

  private void fireChartTableDataChanged()
  {
    final AbstractTableModel tableModel = (AbstractTableModel)
          chartTable.getModel();
    tableModel.fireTableDataChanged();
  }

   private void playerComboBoxActionPerformed(java.awt.event.ActionEvent event)//GEN-FIRST:event_playerComboBoxActionPerformed
   {//GEN-HEADEREND:event_playerComboBoxActionPerformed
     try
     {
       setMakeDraftPickButtonEnabled();
     }
     catch (final Exception e)
     {
       UiUtil.showErrorMessageDialog(this, e.getMessage());
     }
   }//GEN-LAST:event_playerComboBoxActionPerformed

  private void setMakeDraftPickButtonEnabled()
  {
    makeDraftPickButton.setEnabled(isPlayerSelected());
  }

  private boolean isPlayerSelected()
  {
    return (getSelectedPlayer() != null);
  }

   private void positionComboBoxActionPerformed(java.awt.event.ActionEvent event)//GEN-FIRST:event_positionComboBoxActionPerformed
   {//GEN-HEADEREND:event_positionComboBoxActionPerformed
     try
     {
       updatePlayerList();
       setMakeDraftPickButtonEnabled();
     }
     catch (final Exception e)
     {
       UiUtil.showErrorMessageDialog(this, e.getMessage());
     }
   }//GEN-LAST:event_positionComboBoxActionPerformed

   private void teamComboBoxActionPerformed(java.awt.event.ActionEvent event)//GEN-FIRST:event_teamComboBoxActionPerformed
   {//GEN-HEADEREND:event_teamComboBoxActionPerformed
     try
     {
       updatePlayerList();
       setMakeDraftPickButtonEnabled();
     }
     catch (final Exception e)
     {
       UiUtil.showErrorMessageDialog(this, e.getMessage());
     }
   }//GEN-LAST:event_teamComboBoxActionPerformed

  private Team getSelectedTeam()
  {
    return (Team) teamComboBox.getSelectedItem();
  }

  private Position getSelectedPosition()
  {
    return (Position) positionComboBox.getSelectedItem();
  }

  private Player getSelectedPlayer()
  {
    return (Player) playerComboBox.getSelectedItem();
  }

  private void updatePlayerList()
  {
    final Team selectedTeam = getSelectedTeam();
    final Position selectedPosition = getSelectedPosition();

    if ((selectedTeam != null) && (selectedPosition != null))
    {
      final Set<Player> players = playersByTeamAndPosition.
            getPlayersOnTeamAtPosition(selectedTeam, selectedPosition);
      final Set<Player> playersAvailable = new HashSet<Player>();
      for (final Player player : players)
      {
        if (!draft.isPlayerDrafted(player))
        {
          playersAvailable.add(player);
        }
      }
      playerComboBox.setModel(new PlayerComboBoxModel(playersAvailable));

      if (playersAvailable.isEmpty())
      {
        final String noPlayersLeftString = getNoPlayersLeftString(
              selectedTeam, selectedPosition);
        JOptionPane.showMessageDialog(this, noPlayersLeftString);
      }
    }
  }

  private String getNoPlayersLeftString(final Team team,
        final Position position)
  {
    final StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("There are no ");
    switch (position)
    {
      case FORWARD:
      {
        stringBuilder.append("forwards");
        break;
      }
      case DEFENSEMAN:
      {
        stringBuilder.append("defensemen");
        break;
      }
      case GOALIE:
      {
        stringBuilder.append("goalies");
        break;
      }
      default:
      {
        throw new IllegalStateException("Invalid position: " + position);
      }
    }
    stringBuilder.append(" left on the ");
    stringBuilder.append(team.toString());
    stringBuilder.append(".");

    return stringBuilder.toString();
  }

   private void startDraftActionPerformed(java.awt.event.ActionEvent event)//GEN-FIRST:event_startDraftActionPerformed
   {//GEN-HEADEREND:event_startDraftActionPerformed
     try
     {
       if (JOptionPane.showConfirmDialog(this,
             "Are you ready to start the draft?", "Start draft",
             JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
       {
         draft.startDraft();
         updateUiForUnderwayDraft();
       }
     }
     catch (final Exception e)
     {
       UiUtil.showErrorMessageDialog(this, e.getMessage());
     }
   }//GEN-LAST:event_startDraftActionPerformed

  private void updateUiForUnderwayDraft()
  {
    setExtendedState(getExtendedState() | MAXIMIZED_BOTH);

    ((CardLayout) getContentPane().getLayout()).last(getContentPane());

    // Set the table's model.
    //
    final TableModel tableModel = tableModelFactory.getTableModel(draft);
    chartTable.setModel(tableModel);

    // Set the table's default renderer.
    //
    final TableCellRendererFactory tableCellRendererFactory =
          new TableCellRendererFactoryImpl();
    final TableCellRenderer tableCellRenderer =
          tableCellRendererFactory.getTableCellRenderer(draft);
    chartTable.setDefaultRenderer(Object.class, tableCellRenderer);

    final TableColumn firstColumn = chartTable.getColumnModel().getColumn(0);
    final int firstColumnWidth = 36;
    firstColumn.setMaxWidth(firstColumnWidth);
    firstColumn.setMinWidth(firstColumnWidth);
    firstColumn.setPreferredWidth(firstColumnWidth);

    if (draft.getSeasonType() == SeasonType.REGULAR_SEASON)
    {
      final TableColumn numPicksPerTeamColumn =
            chartTable.getColumnModel().getColumn(
            RegularSeasonChartTableModel.NUM_PICKS_COLUMN_INDEX);
      final int columnWidth = 25;
      numPicksPerTeamColumn.setMaxWidth(columnWidth);
      numPicksPerTeamColumn.setMinWidth(columnWidth);
      numPicksPerTeamColumn.setPreferredWidth(columnWidth);
    }

    updateUiAfterDraftPick();

    newPlayoffDraftMenuItem.setEnabled(false);
    newRegularSeasonDraftMenuItem.setEnabled(false);
    openDraftMenuItem.setEnabled(false);
    saveDraftMenuItem.setEnabled(true);
    addPooleeMenuItem.setEnabled(false);
    showPooleesMenuItem.setEnabled(true);
    startDraftMenuItem.setEnabled(false);
    setEnabledStatusForUndoLastDraftPickMenuItem();
  }

  private void setEnabledStatusForUndoLastDraftPickMenuItem()
  {
    undoLastDraftPickMenuItem.setEnabled(!draft.getDraftPicks().isEmpty());
  }

  private void addPooleeActionPerformed(java.awt.event.ActionEvent event)//GEN-FIRST:event_addPooleeActionPerformed
   {//GEN-HEADEREND:event_addPooleeActionPerformed
     try
     {
       AddPooleeDialog addPooleeDialog = new AddPooleeDialog(this,
             draft.getNumPoolees());
       addPooleeDialog.setVisible(true);
       if (addPooleeDialog.wasOkPressed())
       {
         final Poolee poolee = addPooleeDialog.getPoolee();
         final int draftPositionInFirstRound =
               addPooleeDialog.getDraftPositionInFirstRound();
         draft.addPoolee(poolee, draftPositionInFirstRound);
       }
     }
     catch (final Exception e)
     {
       UiUtil.showErrorMessageDialog(this, e.getMessage());
     }
   }//GEN-LAST:event_addPooleeActionPerformed

   private void newPlayoffDraftActionPerformed(java.awt.event.ActionEvent event)//GEN-FIRST:event_newPlayoffDraftActionPerformed
   {//GEN-HEADEREND:event_newPlayoffDraftActionPerformed
     handleNewDraft(SeasonType.PLAYOFF);
   }//GEN-LAST:event_newPlayoffDraftActionPerformed

  private void handleNewDraft(final SeasonType seasonType)
  {
    try
    {
      final String numRoundsString = JOptionPane.showInputDialog(
            this, "How many rounds are in this draft?",
            "New draft: Number of rounds", JOptionPane.QUESTION_MESSAGE);

      if (numRoundsString != null)
      {
        if (numRoundsValidator.isValid(numRoundsString))
        {
          int numRounds = Integer.parseInt(numRoundsString);

          final String numPooleesString = JOptionPane.showInputDialog(
                this, "How many poolees are in this draft?",
                "New draft: Number of poolees",
                JOptionPane.QUESTION_MESSAGE);
          if (numPooleesValidator.isValid(numPooleesString))
          {
            final int numPoolees = Integer.parseInt(numPooleesString);

            draft = draftFactory.createNewDraft(seasonType,
                  playersByTeamAndPosition, numRounds, numPoolees,
                  draftOrderGetter);
            addPooleeMenuItem.setEnabled(true);
            showPooleesMenuItem.setEnabled(true);
            startDraftMenuItem.setEnabled(true);
          }
          else
          {
            JOptionPane.showMessageDialog(this, numPooleesString +
                  " is not a valid number of poolees");
          }
        }
        else
        {
          JOptionPane.showMessageDialog(this, numRoundsString +
                " is not a valid number of rounds");
        }
      }
    }
    catch (final Exception e)
    {
      UiUtil.showErrorMessageDialog(this, e.getMessage());
    }
  }

  public void setNowDrafting()
  {
    final StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("Now drafting:  ");
    stringBuilder.append(draft.getNextPooleeToDraft().getFullName());
    stringBuilder.append(" (");

    final int numConsecutivePicks =
          draft.getNumConsecutivePicksForNextPooleeToDraft();
    stringBuilder.append(numConsecutivePicks);
    if (numConsecutivePicks > 1)
    {
      stringBuilder.append(" picks");
    }
    else
    {
      stringBuilder.append(" pick");
    }
    stringBuilder.append(")");

    nowDraftingLabel.setText(stringBuilder.toString());
  }

  public void setTeamModel()
  {
    final Poolee nextPooleeToDraft = draft.getNextPooleeToDraft();
    teamComboBox.setModel(new TeamComboBoxModel(
          draft.getTeamsAvailableToDraftFrom(nextPooleeToDraft)));
  }

  public void setPositionModel()
  {
    positionComboBox.setModel(new PositionComboBoxModel());
  }

  public void setTeamEmptyModel()
  {
    teamComboBox.setModel(new DefaultComboBoxModel(
          new Object[]
          {
          }));
  }

  public void setPositionEmptyModel()
  {
    positionComboBox.setModel(new DefaultComboBoxModel(
          new Object[]
          {
          }));
  }

  public void setPlayerEmptyModel()
  {
    playerComboBox.setModel(new DefaultComboBoxModel(
          new Object[]
          {
          }));
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem addPooleeMenuItem;
  private javax.swing.JLabel anaheimLabel;
  private javax.swing.JLabel atlanticDivisionLabel;
  private javax.swing.JPanel atlanticDivisionPanel;
  private javax.swing.JPanel atlanticDivisionTeamPanel;
  private javax.swing.JLabel bostonLabel;
  private javax.swing.JPanel bottomPanel;
  private javax.swing.JLabel buffaloLabel;
  private javax.swing.JPanel buttonPanel;
  private javax.swing.JLabel calgaryLabel;
  private javax.swing.JLabel carolinaLabel;
  private javax.swing.JLabel centralDivisionLabel;
  private javax.swing.JPanel centralDivisionPanel;
  private javax.swing.JPanel centralDivisionTeamsPanel;
  private javax.swing.JTable chartTable;
  private javax.swing.JLabel chicagoLabel;
  private javax.swing.JLabel coloradoLabel;
  private javax.swing.JLabel columbusLabel;
  private javax.swing.JLabel dallasLabel;
  private javax.swing.JLabel detroitLabel;
  private javax.swing.JMenu draftMenu;
  private javax.swing.JPanel draftPanel;
  private javax.swing.JPanel draftPickInfoPanel;
  private javax.swing.JLabel draftPickLabel;
  private javax.swing.JLabel draftPickNumLabel;
  private javax.swing.JLabel draftPickOfLabel;
  private javax.swing.JLabel easternConferenceLabel;
  private javax.swing.JPanel easternConferencePanel;
  private javax.swing.JLabel edmontonLabel;
  private javax.swing.JMenuItem exitMenuItem;
  private javax.swing.JLabel fifthMostRecentPickLabel;
  private javax.swing.JMenu fileMenu;
  private javax.swing.JLabel floridaLabel;
  private javax.swing.JLabel fourthMostRecentPickLabel;
  private javax.swing.JPanel infoPanel;
  private javax.swing.JLabel losAngelesLabel;
  private javax.swing.JScrollPane mainChartScrollPane;
  private javax.swing.JButton makeDraftPickButton;
  private javax.swing.JMenuBar menuBar;
  private javax.swing.JLabel minnesotaLabel;
  private javax.swing.JLabel montrealLabel;
  private javax.swing.JLabel mostRecentPickLabel;
  private javax.swing.JLabel nashvilleLabel;
  private javax.swing.JLabel newJerseyLabel;
  private javax.swing.JMenuItem newPlayoffDraftMenuItem;
  private javax.swing.JMenuItem newRegularSeasonDraftMenuItem;
  private javax.swing.JLabel newYorkIslandersLabel;
  private javax.swing.JLabel newYorkRangersLabel;
  private javax.swing.JLabel northeastDivisionLabel;
  private javax.swing.JPanel northeastDivisionPanel;
  private javax.swing.JPanel northeastDivisionTeamsPanel;
  private javax.swing.JLabel northwestDivisionLabel;
  private javax.swing.JPanel northwestDivisionPanel;
  private javax.swing.JPanel northwestDivisionTeamsPanel;
  private javax.swing.JLabel nowDraftingLabel;
  private javax.swing.JMenuItem openDraftMenuItem;
  private javax.swing.JLabel ottawaLabel;
  private javax.swing.JLabel pacificDivisionLabel;
  private javax.swing.JPanel pacificDivisionPanel;
  private javax.swing.JPanel pacificDivisionTeamsPanel;
  private javax.swing.JLabel philadelphiaLabel;
  private javax.swing.JLabel phoenixLabel;
  private javax.swing.JLabel pittsburghLabel;
  private javax.swing.JComboBox playerComboBox;
  private javax.swing.JLabel playerLabel;
  private javax.swing.JComboBox positionComboBox;
  private javax.swing.JLabel positionLabel;
  private javax.swing.JPanel preDraftPanel;
  private javax.swing.JPanel roundInfoPanel;
  private javax.swing.JLabel roundLabel;
  private javax.swing.JLabel roundNumLabel;
  private javax.swing.JLabel roundOfLabel;
  private javax.swing.JLabel sanJoseLabel;
  private javax.swing.JMenuItem saveDraftMenuItem;
  private javax.swing.JLabel secondMostRecentPickLabel;
  private javax.swing.JPanel selectionPanel;
  private javax.swing.JMenuItem showPooleesMenuItem;
  private javax.swing.JLabel southeastDivisionLabel;
  private javax.swing.JPanel southeastDivisionPanel;
  private javax.swing.JPanel southeastDivisionTeamsPanel;
  private javax.swing.JLabel stLouisLabel;
  private javax.swing.JMenuItem startDraftMenuItem;
  private javax.swing.JLabel tampaBayLabel;
  private javax.swing.JComboBox teamComboBox;
  private javax.swing.JLabel teamLabel;
  private javax.swing.JPanel teamPositionPlayerPanel;
  private javax.swing.JLabel thirdMostRecentPickLabel;
  private javax.swing.JPanel tickerAndBottomPanel;
  private javax.swing.JPanel tickerPanel;
  private javax.swing.JLabel titleLabel;
  private javax.swing.JLabel torontoLabel;
  private javax.swing.JLabel totalNumDraftPicksLabel;
  private javax.swing.JLabel totalNumRoundsLabel;
  private javax.swing.JLabel vancouverLabel;
  private javax.swing.JLabel washingtonLabel;
  private javax.swing.JLabel westernConferenceLabel;
  private javax.swing.JPanel westernConferencePanel;
  private javax.swing.JLabel winnipegLabel;
  private JMenuItem undoLastDraftPickMenuItem;
  // End of variables declaration//GEN-END:variables
}
